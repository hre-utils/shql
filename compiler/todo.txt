dict grammar:

   dict        -> '{' assignment (COMMA assignment)? (COMMA)? '}'
   assignment  -> string COLON data

in which it roughly translates to the following bash:

   dict           declare -a _NODE_1=(
   pointer1          '_NODE_2'
   pointer2          '_NODE_3'
                  )

   assignment     declare -A _NODE_2=(
                     [key]=_NODE_4
                     [val]=_NODE_5
                  )

   assignment     declare -A _NODE_3=(
                     [key]=_NODE_6
                     [val]=_NODE_7
                  )

   key node1      declare -- _NODE_4="key_string_here"
   val node1      declare XX _NODE_5=$VAL_OR_NODE

   ...

the val nodes may either be a string termination node, or a list/dict with
further pointers.

using a list of assignment nodes allows us to maintain order with dicts, though
we lose the ability to initially test if a key has been re-used. There would
need to be a second parsing phase to simplify the above structure, and reduce to

   dict           declare -A _NODE_1=(
                     ['string_key']=_NODE_5
                     ['string_key2']=_NODE_7
                  )

   val node1      declare XX _NODE_5=$VAL_OR_NODE
   val node2      declare XX _NODE_7=$VAL_OR_NODE

at this "reducing" stage, we check to ensure we haven't made any oopsies.
